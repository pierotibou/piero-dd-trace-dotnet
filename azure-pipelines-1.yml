trigger: 
  branches: 
    include: 
    - master

variables:
  buildConfiguration: Release
  dotnetCoreSdkLatestVersion: 6.0.100
  relativeTracerHome: /shared/bin/monitoring-home/tracer
  relativeArtifacts: /tracer/src/bin/artifacts
  ddTracerHome: $(System.DefaultWorkingDirectory)/tracer/src/bin/dd-tracer-home
  tracerHome: $(System.DefaultWorkingDirectory)/shared/bin/monitoring-home/tracer
  profilerSrcDirectory: $(System.DefaultWorkingDirectory)/../dd-continuous-profiler-dotnet
  profilerHome: $(System.DefaultWorkingDirectory)/profiler/bin/profiler-home # Important, put the profiler assets into the working directory so it can be saved across build stages more easily
  monitoringHome: $(System.DefaultWorkingDirectory)/shared/bin/monitoring-home
  artifacts: $(System.DefaultWorkingDirectory)/tracer/src/bin/artifacts
  relativeRunnerTool: tracer/src/bin/runnerTool
  relativeRunnerStandalone: tracer/src/bin/runnerStandalone
  ddApiKey: $(DD_API_KEY)
  isMainRepository: $[eq(variables['GITHUB_REPOSITORY_NAME'], 'dd-trace-dotnet')]
  isMainBranch: $[in(variables['Build.SourceBranch'], 'refs/heads/master', 'refs/heads/main')]
  isMainOrReleaseBranch: $[or(in(variables['Build.SourceBranch'], 'refs/heads/master', 'refs/heads/main'), startsWith(variables['Build.SourceBranch'], 'refs/heads/release/'), startsWith(variables['Build.SourceBranch'], 'refs/heads/hostfix/'))]
  isPullRequest: $[eq(variables['Build.Reason'], 'PullRequest')]
  DD_DOTNET_TRACER_MSBUILD:
  NugetPackageDirectory: $(System.DefaultWorkingDirectory)/packages
  relativeNugetPackageDirectory: packages
  # For scheduled builds, only run benchmarks and crank (and deps).
  isScheduledBuild: ${{ eq(variables['Build.Reason'], 'Schedule') }} # only works if you have a main branch
  dotnetToolTag: build-dotnet-tool
  Verify_DisableClipboard: true
  DiffEngine_Disabled: true
  OriginalCommitId: $[coalesce(variables['System.PullRequest.SourceCommitId'], variables['Build.SourceVersion'])]
  NUGET_ENABLE_EXPERIMENTAL_HTTP_RETRY: true

stages:
- stage: master_commit_id
  dependsOn: []
  jobs:
  - job: fetch
    pool:
      vmImage: ubuntu-18.04

    steps:
    - checkout: none
    - bash: |
        git clone --quiet --no-checkout --depth 1 --branch master $BUILD_REPOSITORY_URI ./s
        cd s
        MASTER_SHA=$(git rev-parse origin/master)
        echo "Using master commit ID $MASTER_SHA"
        echo "##vso[task.setvariable variable=master;isOutput=true]$MASTER_SHA"
      failOnStderr: true
      displayName: Fetch master id
      name: set_sha

- stage: generate_variables
  dependsOn: [master_commit_id]
  variables:
    masterCommitId: $[ stageDependencies.master_commit_id.fetch.outputs['set_sha.master']]
  jobs:
  - template: .azure-pipelines/steps/update-github-status-jobs.yml
    parameters:
      jobs: [generate_variables_job]

  - job: generate_variables_job
    dependsOn: []
    pool:
      vmImage: windows-2019

    steps:
    - template: .azure-pipelines/steps/clone-repo.yml
      parameters:
        masterCommitId: $(masterCommitId)
    - template: .azure-pipelines/steps/install-latest-dotnet-sdk.yml

    - powershell: |
        tracer/build.ps1 GenerateVariables
      displayName: Generate Matrices
      name: generate_variables_step

- stage: integration_tests_windows_iis

  jobs:
  - job: IIS
    timeoutInMinutes: 100
    strategy:
      matrix: $[stageDependencies.generate_variables.generate_variables_job.outputs['generate_variables_step.integration_tests_windows_iis_matrix'] ]
    pool:
      name: azure-windows-scale-set
    variables:
      relativeMsiOutputDirectory: $(relativeArtifacts)/$(targetPlatform)/en-us
      USE_NATIVE_LOADER: true

    steps:
    - script: "echo $(targetPlatform)"
    - template: .azure-pipelines/steps/install-dotnet-sdks.yml
      parameters:
        includeX86: #$(eq(targetPlatform, 'x86'))